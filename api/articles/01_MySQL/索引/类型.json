{"title":"索引的类型","uid":"cc82895a993ed8e5fa47b14980296312","slug":"01_MySQL/索引/类型","date":"2016-03-13T06:05:07.000Z","updated":"2022-10-05T13:38:01.994Z","comments":true,"path":"api/articles/01_MySQL/索引/类型.json","keywords":null,"cover":null,"content":"<ol>\n<li><p>从存储结构上来划分：</p>\n<p>BTree索引（B-Tree或B+Tree索引）；</p>\n<p>Hash索引；</p>\n<p>full-index全文索引；</p>\n<p>R-Tree索引</p>\n<p>这里所描述的是索引存储时保存的形式</p>\n</li>\n<li><p>从应用层次来分：</p>\n<p>主键索引；</p>\n<p>普通索引；</p>\n<p>唯一索引；</p>\n<p>复合索引(联合索引)；</p>\n<p>空间索引；</p>\n</li>\n<li><p>根据中数据的物理顺序与键值的逻辑（索引）顺序关系：</p>\n<p>聚集索引(聚族索引)；</p>\n<p>非聚集索引(非聚族索引)；</p>\n</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>总结</p></blockquote>\n<table>\n<thead>\n<tr>\n<th>索引类型</th>\n<th align=\"center\">概念</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>普通索引</td>\n<td align=\"center\">一个索引只包含一个列，一个表可以有多个单列索引</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td align=\"center\">索引列的值必须唯一，但允许有空值</td>\n</tr>\n<tr>\n<td>复合索引</td>\n<td align=\"center\">多列值组成一个索引，专门用于组合搜索，其效率大于索引合并</td>\n</tr>\n<tr>\n<td>聚簇索引</td>\n<td align=\"center\">也称为主键索引，是一种数据存储方式。<br />B+Tree结构，<br />非叶子节点包含健值和指针，叶子节点包含索引列和行数据。<br />一张表只能有一个聚簇索引。</td>\n</tr>\n<tr>\n<td>非聚簇索引</td>\n<td align=\"center\">不是聚簇索引，就是非聚簇索引。<br />叶子节点只是存索引列和主键id。<br />如果sql还要返回除了索引列的其他字段信息，需要回表，<br />第一次索引一般是顺序IO，回表的操作属于随机IO。<br />回表的次数越多，性能越差</td>\n</tr>\n</tbody></table>\n","text":" 从存储结构上来划分： BTree索引（B-Tree或B+Tree索引）； Hash索引； full-index全文索引； R-Tree索引 这里所描述的是索引存储时保存的形式 从应用层次来分： 主键索引； 普通索引； 唯一索引； 复合索引(联合索引)； 空间索引； 根据中数据的...","link":"","photos":[],"count_time":{"symbolsCount":486,"symbolsTime":"1 mins."},"categories":[{"name":"索引","slug":"索引","count":14,"path":"api/categories/索引.json"}],"tags":[{"name":"索引","slug":"索引","count":15,"path":"api/tags/索引.json"}],"toc":"","author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}},"mapped":true,"prev_post":{"title":"覆盖索引","uid":"14259dca92b4f8c7a0ce08ea8747bdb9","slug":"01_MySQL/索引/覆盖索引","date":"2016-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:01.999Z","comments":true,"path":"api/articles/01_MySQL/索引/覆盖索引.json","keywords":null,"cover":null,"text":"覆盖索引，指的是在一次查询中，一个索引包含所有需要查询的字段的值，可能是返回值或where条件 select buyer_id from order where money &gt; 100 假如我们创建了一个(money，buyer_id)的联合索引，索引的叶子节点包含了buy...","link":"","photos":[],"count_time":{"symbolsCount":160,"symbolsTime":"1 mins."},"categories":[{"name":"索引","slug":"索引","count":14,"path":"api/categories/索引.json"}],"tags":[{"name":"索引","slug":"索引","count":15,"path":"api/tags/索引.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},"next_post":{"title":"聚簇索引与非聚簇索引","uid":"82ad704264f844d11231e75cf8c5d2e6","slug":"01_MySQL/索引/(非)聚簇索引","date":"2015-10-03T12:14:56.000Z","updated":"2022-10-05T13:38:01.992Z","comments":true,"path":"api/articles/01_MySQL/索引/(非)聚簇索引.json","keywords":null,"cover":null,"text":"在 InnoDB 里，索引B+ Tree的叶子节点存储了整行数据的是主键索引，也被称之为聚簇索引，即将数据存储与索引放到了一块，找到索引也就找到了数据。 而索引B+ Tree的叶子节点存储了主键的值的是非主键索引，也被称之为非聚簇索引、二级索引。 聚簇索引与非聚簇索引的区别： 非...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"索引","slug":"索引","count":14,"path":"api/categories/索引.json"}],"tags":[{"name":"索引","slug":"索引","count":15,"path":"api/tags/索引.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}}}