{"title":"索引下推","uid":"8168bc864d1b3d3139b7796e97f98317","slug":"01_MySQL/索引/索引下推","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:01.994Z","comments":true,"path":"api/articles/01_MySQL/索引/索引下推.json","keywords":null,"cover":[],"content":"<p>MySQL 5.6引入了索引下推优化。默认开启，使用SET optimizer_switch &#x3D; ‘index_condition_pushdown&#x3D;off’;可以将其关闭。</p>\n<ul>\n<li>有了索引下推优化，可以在<strong>减少回表次数</strong></li>\n<li>在InnoDB中只针对二级索引有效</li>\n</ul>\n<p>官方文档中给的例子和解释如下：</p>\n<p>在 people_table中有一个二级索引(zipcode，lastname，firstname)，查询是SELECT * FROM people WHERE zipcode&#x3D;’95054′ AND lastname LIKE ‘%etrunia%’ AND address LIKE ‘%Main Street%’;</p>\n<ul>\n<li>如果没有使用索引下推技术，则MySQL会通过zipcode&#x3D;’95054’从存储引擎中查询对应的数据，返回到MySQL服务端，然后MySQL服务端基于lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断数据是否符合条件</li>\n<li>如果使用了索引下推技术，则MYSQL首先会返回符合zipcode&#x3D;’95054’的索引，然后根据lastname LIKE ‘%etrunia%’ and address LIKE ‘%Main Street%’来判断索引是否符合条件。如果符合条件，则根据该索引来定位对应的数据，如果不符合，则直接reject掉。</li>\n</ul>\n<p>Mysql5.6之前是没有索引下推这个功能，后面为了提高性能，避免不必要的回表5.6之后就有了索引下推优化的功能。</p>\n<p>假如我们有一个用户表，并且使用用户的name，age两个字段建立联合索引，name在没有索引下推的功能，执行下面的sql，执行的流程如下图所示：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select * from tuser where name like &#39;张%&#39; and age&#x3D;10 and ismale&#x3D;1;</code></pre>\n\n<p><img src=\"/mikeah2011/Users/michael/Project/MichaelBlog/images/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8_1.png\" alt=\"图片\"></p>\n<p>当比较第一个索引字段name like ‘张%’ 就会筛选出四行数据，后面它不会再比较age值是否符合要求，直接获取到主键值，然后在回表查询，回表后再对比age、ismale是否符合条件。</p>\n<p>从上面的数据看来其实name，age两个字段建立的联合索引，两个字段的值会存储在联合索引树中，可以直接对比age字段是否符合查询的条件age&#x3D;10，那么索引下推就是做了这些事：</p>\n<p><img src=\"/mikeah2011/Users/michael/Project/MichaelBlog/images/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8_2.png\" alt=\"图片\"></p>\n<p>索引下推会再次根据你的age进行比较，发现有两条记录不符合条件直接过滤掉，符合条件的才会进行回表查询，这样就减少了不必要的回表查询。</p>\n","text":"MySQL 5.6引入了索引下推优化。默认开启，使用SET optimizer_switch &#x3D; ‘index_condition_pushdown&#x3D;off’;可以将其关闭。 有了索引下推优化，可以在减少回表次数 在InnoDB中只针对二级索引有效 官方文档中...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"索引","slug":"索引","count":14,"path":"api/categories/索引.json"}],"tags":[{"name":"索引","slug":"索引","count":15,"path":"api/tags/索引.json"}],"toc":"","author":{"name":"Michael","slug":"michael","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Just Do IT","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/22619211"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/22619211"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}},"mapped":true,"prev_post":{"title":"索引失效的原因","uid":"fab493d9c5b4a3034c764bb5ca7924c1","slug":"01_MySQL/索引/失效原因","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:01.993Z","comments":true,"path":"api/articles/01_MySQL/索引/失效原因.json","keywords":null,"cover":null,"text":"使用not in、not exists、!=、&lt;&gt;、or、函数、运算符、模糊搜索以及类型不一致等情况会导致索引失效； 不满足 最左前缀原则 范围索引列 没有放最后 使用了select * 索引列上有计算、函数运算 字符类型没加引号，隐式转换 使用is (no) nul...","link":"","photos":[],"count_time":{"symbolsCount":180,"symbolsTime":"1 mins."},"categories":[{"name":"索引","slug":"索引","count":14,"path":"api/categories/索引.json"}],"tags":[{"name":"索引","slug":"索引","count":15,"path":"api/tags/索引.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Just Do IT","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/22619211"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/22619211"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}},"next_post":{"title":"导入&导出优选CSV格式的理由","uid":"d84a5be77f321e677b0e0b0840c629ed","slug":"Other/csv","date":"2018-04-08T02:27:28.000Z","updated":"2022-10-06T07:14:56.620Z","comments":true,"path":"api/articles/Other/csv.json","keywords":null,"cover":null,"text":"CSV，comma-separated values 逗号分隔值，通常被用于在使用纯文本的系统之间，交换表格类型的数据。 CSV是一种基于行的文件格式。也就是说，此类文件中的每一行都对应到数据表中的具体某一行。通常，CSV文件里包含有一个标题行，该标题行提供了数据的列名。如果没有...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"csv","slug":"csv","count":1,"path":"api/tags/csv.json"},{"name":"import","slug":"import","count":1,"path":"api/tags/import.json"},{"name":"export","slug":"export","count":1,"path":"api/tags/export.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Just Do IT","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/22619211"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/22619211"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}}}