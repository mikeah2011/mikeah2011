{"title":"MySQL事务","uid":"c1f6d722cc4602038235f2e7924e8ff2","slug":"01_MySQL/事务","date":"2020-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:01.991Z","comments":true,"path":"api/articles/01_MySQL/事务.json","keywords":null,"cover":null,"content":"<p>事务概念</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>4个原则 ACID\t</p></blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">原则</th>\n<th align=\"center\">概念</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">原子性</td>\n<td align=\"center\">一个事务中的操作要么全部成功，要么全部失败</td>\n<td>Atomicity</td>\n</tr>\n<tr>\n<td align=\"center\">一致性</td>\n<td align=\"center\">总是从一个一致性的状态转换到另一个一致性的状态</td>\n<td>Consistent</td>\n</tr>\n<tr>\n<td align=\"center\">隔离性</td>\n<td align=\"center\">一个事务的修改在提交前，其他事务是感知不到的</td>\n<td>Isalotion</td>\n</tr>\n<tr>\n<td align=\"center\">持久性</td>\n<td align=\"center\">永久保存在数据库中</td>\n<td>Durable</td>\n</tr>\n</tbody></table>\n<p>​\t<strong>原子性、隔离性、持久性都是为了保障一致性而存在的，一致性也是最终的目的</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>隔离级别</p></blockquote>\n<p>​\t读未提交\t<strong>READ UNCOMMITTED</strong></p>\n<p>​\t读已提交\t<strong>READ COMMITTED</strong></p>\n<p>​\t可重复读\t<strong>REPEATABLE READ</strong></p>\n<p>​\t可序列化\t<strong>SERIALIZABLE</strong></p>\n<p>没有那种隔离级别是完美的，只能根据自己的项目业务场景去评估选择最适合的隔离级别，大部分的公司一般选择Mysql默认的隔离级别：<strong>可重复读</strong>。</p>\n<p>隔离级别从：<strong>读未提交-读提交-可重复读-串行化</strong>，<strong>级别越来越高，隔离也就越来越严实，到最后的串行化，当出现读写锁冲突的时候，后面的事务只能等前面的事务完成后才能继续访问</strong>。</p>\n<ol>\n<li><strong>读未提交：读取到别的事务还没有提交的数据，从而产生了脏读</strong>。</li>\n<li><strong>读提交：读取别的事务已经提交的数据，从而产生不可重复读。</strong></li>\n<li><strong>可重复读：事务开启过程中看到的数据和事务刚开始看到的数据是一样的，从而产生幻读，在Mysql的中通过MVCC多版本控制的一致性视图解决了不可重复读问题以及通过间隙锁解决了幻读问题。</strong></li>\n<li><strong>串行化：对于同一行记录，若是读写锁发生冲突，后面访问的事务只能等前面的事务执行完才能继续访问</strong>。</li>\n</ol>\n<p>举个例子，假如有一个user表，里面有两个字段id和age，里面有一条测试数据：（1,24），现在要执行age+1，同时有两个事务执行：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">事务1</th>\n<th align=\"left\">事务2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">启动事务，接着查询age（a1）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">启动事务</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">查询age（a2）</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">执行age&#x3D;age+1</td>\n</tr>\n<tr>\n<td align=\"left\">查询age（a3）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">提交事务</td>\n</tr>\n<tr>\n<td align=\"left\">查询age（a4）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">提交事务</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">查询age（a5）</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>经过上面的执行，在四种隔离级别下a1,a2,a3,a4,a5的值分别是多少？我们来认真的分析一波：</p>\n<ol>\n<li><strong>读未提交</strong>：a1和a2因为读的是初始值所以为24，隔离级别为读未提交，事务2执行了age&#x3D;age+1，不管事务2是否提交，那么a3、a4和a5的值都是25。</li>\n<li><strong>读提交</strong>：a1和a2因为读的是初始值所以为24，隔离级别为读提交所以a3还是24，a4和a5因为事务2已经提交所以得到的值是25。</li>\n<li><strong>可重复读</strong>：a1和a2因为读的是初始值所以为24，可重复读的隔离级别下，a3和a4读取的值和事务开始的结果一样，所以还是24，a5前一步因为已经提交事务，所以a5的值是25。</li>\n<li><strong>串行化</strong>：a1和a2因为读的是初始值所以为24，串行化隔离级别下，当事务2修改数据的时候，获取了写锁，事务1读取age的值会被锁住，所以在事务1的角度下a3和a4读取的值为24，a5的值为25。</li>\n</ol>\n<p>当你能够分析得出这个例子下，在不同隔离级别下分析的出a1-a5的值，说明你对事务的隔离级别已经有比较深入的理解了。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>并发事务的问题</p></blockquote>\n<p>​\t更新丢失</p>\n<p>​\t脏读</p>\n<p>​\t不可重复读</p>\n<p>​\t幻读</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实现分布式事务</p></blockquote>\n<p>1、流水任务，最终一致性，前提是接口要支持幂等性</p>\n<p>2、事务消息</p>\n<p>3、二阶段提交</p>\n<p>4、三阶段提交</p>\n<p>5、TCC</p>\n<p>6、Seata 框架</p>\n","text":"事务概念 4个原则 ACID 原则 概念 原子性 一个事务中的操作要么全部成功，要么全部失败 Atomicity 一致性 总是从一个一致性的状态转换到另一个一致性的状态 Consistent 隔离性 一个事务的修改在提交前，其他事务是感知不到的 Isalotion 持久性 永久保...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"SQL","slug":"SQL","count":15,"path":"api/categories/SQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":16,"path":"api/tags/MySQL.json"}],"toc":"","author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}},"mapped":true,"prev_post":{"title":"MySQL存储引擎","uid":"a1edca3a2bbcac434a13f40d2a6e8589","slug":"01_MySQL/存储引擎","date":"2020-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:01.991Z","comments":true,"path":"api/articles/01_MySQL/存储引擎.json","keywords":null,"cover":[],"text":" InnoDB和MyISAM的区别 （1）InnoDB和MyISAM都是Mysql的存储引擎，现在MyISAM也逐渐被InnoDB给替代，主要因为InnoDB支持事务和行级锁，MyISAM不支持事务和行级锁，MyISAM最小锁单位是表级。因为MyISAM不支持行级锁，所以在并发处...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"SQL","slug":"SQL","count":15,"path":"api/categories/SQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":16,"path":"api/tags/MySQL.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},"next_post":{"title":"性能优化方案","uid":"dc0f0a28e862093b53019489e393e51e","slug":"01_MySQL/性能优化策略","date":"2020-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:01.992Z","comments":true,"path":"api/articles/01_MySQL/性能优化策略.json","keywords":null,"cover":null,"text":" 数据量比较大，批量操作数据入库 耗时操作考虑异步处理 恰当使用缓存 优化程序逻辑、代码 SQL优化 压缩传输内容 考虑使用文件&#x2F;MQ等其他方式暂存，异步再落地DB 跟产品讨论需求最恰当，最舒服的实现方式 本文会提到52条SQL语句性能优化策略。 1、对查询进行优化，应...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"SQL","slug":"SQL","count":15,"path":"api/categories/SQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":16,"path":"api/tags/MySQL.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}}}