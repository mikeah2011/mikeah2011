{"title":"Kafka","uid":"e1579ed1c931165c644c9ec68da7a87a","slug":"04_MQ/Kafka","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.014Z","comments":true,"path":"api/articles/04_MQ/Kafka.json","keywords":null,"cover":[],"content":"<p>使用<code>kafka</code>可以对系统</p>\n<p>​\t解耦、</p>\n<p>​\t流量削峰、</p>\n<p>​\t缓冲</p>\n<p>可以实现系统间的异步通信等。</p>\n<p>在活动追踪、消息传递、度量指标、日志记录和流式处理等场景中非常适合使用<code>kafka</code>。</p>\n<p><img src=\"/mikeah2011/Users/michael/Project/MichaelBlog/images/640.png\" alt=\"图片\"></p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>释义</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Broker</strong></td>\n<td>服务代理节点</td>\n<td>其实就是一个kafka实例或服务节点，多个broker构成了kafka cluster</td>\n</tr>\n<tr>\n<td><strong>Producer</strong></td>\n<td>生产者</td>\n<td>也就是写入消息的一方，将消息写入broker中</td>\n</tr>\n<tr>\n<td><strong>Consumer</strong></td>\n<td>消费者</td>\n<td>也就是读取消息的一方，从broker中读取消息</td>\n</tr>\n<tr>\n<td><strong>Consumer Group</strong></td>\n<td>消费组</td>\n<td>一个或多个消费者构成一个消费组，不同的消费组可以订阅同一个主题的消息且互不影响</td>\n</tr>\n<tr>\n<td><strong>ZooKeeper</strong></td>\n<td></td>\n<td>kafka使用zookeeper来管理集群的元数据，以及控制器的选举等操作</td>\n</tr>\n<tr>\n<td><strong>Topic</strong></td>\n<td>主题</td>\n<td>每一个消息都属于某个主题，kafka通过主题来划分消息，是一个逻辑上的分类。</td>\n</tr>\n<tr>\n<td><strong>Partition</strong></td>\n<td>分区</td>\n<td>同一个主题下的消息还可以继续分成多个分区，一个分区只属于一个主题</td>\n</tr>\n<tr>\n<td><strong>Replica</strong></td>\n<td>副本</td>\n<td>一个分区可以有多个副本来提高容灾性。</td>\n</tr>\n<tr>\n<td><strong>Leader and Follower</strong></td>\n<td>主从</td>\n<td>分区有了多个副本，那么就需要有同步方式。kafka使用一主多从进行消息同步，主副本提供读写的能力，而从副本不提供读写，仅仅作为主副本的备份。</td>\n</tr>\n<tr>\n<td><strong>Offset</strong></td>\n<td>偏移</td>\n<td>分区中的每一条消息都有一个所在分区的偏移量，这个偏移量唯一标识了该消息在当前这个分区的位置，并保证了在这个分区的顺序性，不过不保证跨分区的顺序性。</td>\n</tr>\n</tbody></table>\n<p>简单来说，作为消息系统的kafka本质上还是一个数据系统。既然是一个数据系统，那么就要解决两个根本问题：</p>\n<ul>\n<li><p>当我们把数据交给kafka的时候，kafka怎么存储；</p>\n</li>\n<li><p>当我们向kafka要回数据的时候，kafka怎么返回。</p>\n<p><img src=\"/mikeah2011/Users/michael/Project/MichaelBlog/images/641.png\" alt=\"图片\"></p>\n</li>\n</ul>\n<p>目前大多数数据系统将数据存储在磁盘的格式有追加日志型以及B+树型。而kafka采用了追加日志的格式将数据存储在磁盘上，整体的结构如下图：</p>\n<p><img src=\"/mikeah2011/Users/michael/Project/MichaelBlog/images/642.png\" alt=\"图片\"></p>\n<p>追加日志的格式可以带来写性能的提升（毕竟只需要往日志文件后面追加就可以了），但是同时对读的支持不是很友好。为了提升读性能，kafka需要额外的操作。</p>\n<p>关于kafka的数据是如何存储的是一个比较大的问题，这里先从逻辑层面开始。</p>\n<p>Topic+Partition的两层结构</p>\n<p>Offset</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>发送方式</p></blockquote>\n<p>消息的发送有三种方式：</p>\n<ul>\n<li><p>发后即忘（fire and forget）：只管发送不管结果，性能最高，可靠性也最差；</p>\n</li>\n<li><p>同步（sync）：等集群确认消息写入成功再返回，可靠性最高，性能差很多；</p>\n</li>\n<li><p>异步（async）：指定一个callback，kafka返回响应后调用来实现异步发送的确认。</p>\n</li>\n</ul>\n<p>其中前两个是同步发送，后一个是异步发送。不过这里的异步发送没有提供callback的能力。</p>\n<p>那么生产者发送消息之后kafka怎么才算确认呢？这涉及到acks参数：</p>\n<ul>\n<li><p>acks &#x3D; 1, 默认值1，表示只要分区的leader副本成功写入就算成功；</p>\n</li>\n<li><p>acks&#x3D;0，生产者不需要等待任何服务端的响应，可能会丢失数据；</p>\n</li>\n<li><p>acks&#x3D;-1或acks&#x3D;all，需要全部处于同步状态的副本确认写入成功，可靠性最强，性能也差。</p>\n</li>\n</ul>\n<p><a href=\"https://mp.weixin.qq.com/s/A5Dl_8reejqjMWFiI1iV4g\">参考</a></p>\n","text":"使用kafka可以对系统 ​ 解耦、 ​ 流量削峰、 ​ 缓冲 可以实现系统间的异步通信等。 在活动追踪、消息传递、度量指标、日志记录和流式处理等场景中非常适合使用kafka。 组件 释义 备注 Broker 服务代理节点 其实就是一个kafka实例或服务节点，多个broker构...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"MQ","slug":"MQ","count":3,"path":"api/categories/MQ.json"}],"tags":[{"name":"Kafka","slug":"Kafka","count":1,"path":"api/tags/Kafka.json"}],"toc":"","author":{"name":"Michael","slug":"michael","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Just Do IT","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/22619211"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/22619211"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}},"mapped":true,"prev_post":{"title":"MQ面试经","uid":"c07280ed37e56a831a850ef11c3453d2","slug":"04_MQ/MQ","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.015Z","comments":true,"path":"api/articles/04_MQ/MQ.json","keywords":null,"cover":[],"text":"为什么使用消息队列？消息队列的优点和缺点？kafka、activemq、rabbitmq、rocketmq都有什么优缺点？ 面试官角度分析： （1）你知不知道你们系统里为什么要用消息队列这个东西？ （2）既然用了消息队列这个东西，你知不知道用了有什么好处？ （3）既然你用了MQ，...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"MQ","slug":"MQ","count":3,"path":"api/categories/MQ.json"}],"tags":[{"name":"MQ","slug":"MQ","count":1,"path":"api/tags/MQ.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Just Do IT","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/22619211"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/22619211"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}},"next_post":{"title":"MQ","uid":"f8ef4e10e9f952ff4ed3590ecc45cea3","slug":"04_MQ/众多MQ区别","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.015Z","comments":true,"path":"api/articles/04_MQ/众多MQ区别.json","keywords":null,"cover":null,"text":"转自 特性 ActiveMQ RabbitMQ RocketMQ Kafka 单机吞吐量 万级，比 RocketMQ、Kafka 低一个数量级 同 ActiveMQ 10 万级，支撑高吞吐 10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景 topic ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"MQ","slug":"MQ","count":3,"path":"api/categories/MQ.json"}],"tags":[{"name":"message","slug":"message","count":1,"path":"api/tags/message.json"},{"name":"queue","slug":"queue","count":1,"path":"api/tags/queue.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Just Do IT","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/7318914058","zhihu":"https://www.zhihu.com/people/tridiamond","csdn":"https://blog.csdn.net/TriDiamond6","juejin":"https://juejin.cn/user/1873223546578589","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/22619211"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/22619211"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/22619211"},"facebook":{"icon":"/svg/facebook.svg","link":"https://facebook.com"}}}}}}