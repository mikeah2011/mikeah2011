{"title":"Redis缓存击穿","uid":"406c5d5fe6c6fd475c83074ee629ccea","slug":"02_Redis/缓存击穿","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.010Z","comments":true,"path":"api/articles/02_Redis/缓存击穿.json","keywords":null,"cover":null,"content":"<p><strong>什么是缓存击穿？</strong></p>\n<p>其实跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是一个热点的Key，有大并发集中对其进行访问，突然间这个Key失效了，导致大并发全部打在数据库上，导致数据库压力剧增。这种现象就叫做缓存击穿。</p>\n<p><strong>分析：</strong></p>\n<p>关键在于某个热点的key失效了，导致大并发集中打在数据库上。所以要从两个方面解决，第一是否可以考虑热点key不设置过期时间，第二是否可以考虑降低打在数据库上的请求数量。</p>\n<p><strong>解决方案：</strong></p>\n<p>1、上面说过了，如果业务允许的话，对于热点的key可以设置永不过期的key。</p>\n<p>2、使用互斥锁。如果缓存失效的情况，只有拿到锁才可以查询数据库，降低了在同一时刻打在数据库上的请求，防止数据库打死。当然这样会导致系统的性能变差。</p>\n","text":"什么是缓存击穿？ 其实跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是一个热点的Key，有大并发集中对其进行访问，突然间这个Key失效了，导致大并发全部打在数据库上，导致数据库压力剧增。这种现象就叫做缓存击穿。 分析： 关键在于某个热点的key失效了，导致大并发集中...","link":"","photos":[],"count_time":{"symbolsCount":321,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"toc":"","author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/","zhihu":"https://www.zhihu.com/people/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/user/","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/"},"facebook":{"icon":"iconfont icon-facebook","link":"https://facebook.com"}}}},"mapped":true,"prev_post":{"title":"控制并发","uid":"f9a9c6facd4e5bfb5a48d022643ffd1d","slug":"01_MySQL/控制并发","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:01.992Z","comments":true,"path":"api/articles/01_MySQL/控制并发.json","keywords":null,"cover":null,"text":"Mysql内部通过锁机制实现对资源的并发访问控制，保证数据的一致性，锁机制的类型和引擎的种类有关，MyISAM中默认支持的表级锁有两种：共享读锁和独占写锁。表级锁在MyISAM和InnoDB的存储引擎中都支持，但是InnoDB默认支持的是行锁。 MyISAM锁机制Mysql中可以...","link":"","photos":[],"count_time":{"symbolsCount":757,"symbolsTime":"1 mins."},"categories":[{"name":"SQL","slug":"SQL","count":15,"path":"api/categories/SQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":16,"path":"api/tags/MySQL.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/","zhihu":"https://www.zhihu.com/people/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/user/","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/"},"facebook":{"icon":"iconfont icon-facebook","link":"https://facebook.com"}}}}},"next_post":{"title":"穿透&雪崩&击穿","uid":"9a6b411f07708c98a59d4123c2ccd32a","slug":"02_Redis/比较区别_穿透和雪崩","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.010Z","comments":true,"path":"api/articles/02_Redis/比较区别_穿透和雪崩.json","keywords":null,"cover":[],"text":" 雪崩 穿透 击穿 概念 当某一个时刻出现大规模的缓存失效的情况，那么就会导致大量的请求直接打在数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。 访问redis中一个不存在的key的...","link":"","photos":[],"count_time":{"symbolsCount":675,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/","zhihu":"https://www.zhihu.com/people/","csdn":"https://blog.csdn.net/","juejin":"https://juejin.cn/user/","customs":{"bilibili":{"icon":"http://localhost:4000/svg/bilibili.svg","link":"https://live.bilibili.com/"},"baidu":{"icon":"iconfont icon-baidu","link":"https://live.bilibili.com/"},"book":{"icon":"far fa-address-book","link":"https://live.bilibili.com/"},"facebook":{"icon":"iconfont icon-facebook","link":"https://facebook.com"}}}}}}