{"name":"redis","slug":"redis","count":10,"postlist":[{"title":"Redis常见的问题及方案","uid":"c7c9df441ac26b0eb6f306a3696b3570","slug":"02_Redis/Redis","date":"2022-08-20T08:05:07.000Z","updated":"2022-10-06T07:23:27.643Z","comments":true,"path":"api/articles/02_Redis/Redis.json","keywords":null,"cover":[],"text":"为了便于大家查找问题，了解全貌，整理个目录，我们可以快速全局了解关于Redis 缓存，面试官一般喜欢问哪些问题？ 接下来，我们逐条来看看每个问题及解决方案 Redis 有哪些特性？ 性能高， 读的速度是100000次&#x2F;s，写的速度是80000次&#x2F;s 数据持久化...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},{"title":"Redis Cluster 原理探讨","uid":"ca18af8a7c9f51eca47fbf29c78c60fe","slug":"02_Redis/RedisCluster","date":"2020-07-25T12:55:57.000Z","updated":"2022-10-06T07:47:29.146Z","comments":true,"path":"api/articles/02_Redis/RedisCluster.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/image-20221004222258747.png","text":" Redis Cluster hash(key) % 16384 &#x3D; slot 哈希槽 &#x3D; hash(key) &amp; 2^n^ slot - hash槽分布范围[0-5460] 、 [5461-10922]、[10923-16383] # 创建Redis...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"},{"name":"高可用","slug":"高可用","count":1,"path":"api/tags/高可用.json"},{"name":"集群","slug":"集群","count":1,"path":"api/tags/集群.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}},"feature":true},{"title":"Redis 队列消费","uid":"dc39dd35ae294923e1738eec2083266a","slug":"02_Redis/Redis消息队列","date":"2017-03-20T07:05:07.000Z","updated":"2022-10-06T07:17:52.229Z","comments":true,"path":"api/articles/02_Redis/Redis消息队列.json","keywords":null,"cover":null,"text":" 数据结构 list - 先进先出 - 左进右出 归纳 实现方式 操作 效果 单list 左进右出 lpush rpop 最简单，实际应用比较局限 多list brpop list1 list2 0 推荐用法，实际应用最为合适 特定单list list1 - 高优list2 - ...","link":"","photos":[],"count_time":{"symbolsCount":726,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},{"title":"Redis缓存","uid":"3682ab669363b7cc91c7e1f90f676fac","slug":"02_Redis/比较区别_Redis和Memcache","date":"2021-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.010Z","comments":true,"path":"api/articles/02_Redis/比较区别_Redis和Memcache.json","keywords":null,"cover":null,"text":"数据结构：memcache仅支持简单的key-value形式，Redis支持的数据更多（string字符串，set集合，list列表，hash散列，zset有序集合）； 多线程：memcache支持多线程，Redis支持单线程 持久化：Redis支持持久化，memcache不支持...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},{"title":"穿透&雪崩&击穿","uid":"9a6b411f07708c98a59d4123c2ccd32a","slug":"02_Redis/比较区别_穿透和雪崩","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.010Z","comments":true,"path":"api/articles/02_Redis/比较区别_穿透和雪崩.json","keywords":null,"cover":[],"text":" 雪崩 穿透 击穿 概念 当某一个时刻出现大规模的缓存失效的情况，那么就会导致大量的请求直接打在数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。 访问redis中一个不存在的key的...","link":"","photos":[],"count_time":{"symbolsCount":675,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},{"title":"Redis全部","uid":"6394dcbc9517d7089b969dfbe59af1da","slug":"02_Redis/Redis面试","date":"2022-03-20T07:05:07.000Z","updated":"2022-10-06T07:18:38.809Z","comments":true,"path":"api/articles/02_Redis/Redis面试.json","keywords":null,"cover":[],"text":"基础1.说说什么是Redis? Redis图标 Redis是一种基于键值对（key-value）的NoSQL数据库。 比一般键值对数据库强大的地方，Redis中的value支持string（字符串）、hash（哈希）、 list（列表）、set（集合）、zset（有序集合）、Bi...","link":"","photos":[],"count_time":{"symbolsCount":"28k","symbolsTime":"25 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},{"title":"Redis缓存击穿","uid":"406c5d5fe6c6fd475c83074ee629ccea","slug":"02_Redis/缓存击穿","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.010Z","comments":true,"path":"api/articles/02_Redis/缓存击穿.json","keywords":null,"cover":null,"text":"什么是缓存击穿？ 其实跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是一个热点的Key，有大并发集中对其进行访问，突然间这个Key失效了，导致大并发全部打在数据库上，导致数据库压力剧增。这种现象就叫做缓存击穿。 分析： 关键在于某个热点的key失效了，导致大并发集中...","link":"","photos":[],"count_time":{"symbolsCount":321,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},{"title":"Redis缓存穿透","uid":"a0f45cd6c322a6e03b4044aafd033b7f","slug":"02_Redis/缓存穿透","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.010Z","comments":true,"path":"api/articles/02_Redis/缓存穿透.json","keywords":null,"cover":[],"text":"我们使用Redis大部分情况都是通过Key查询对应的值，假如发送的请求传进来的key是不存在Redis中的，那么就查不到缓存，查不到缓存就会去数据库查询。假如有大量这样的请求，这些请求像“穿透”了缓存一样直接打在数据库上，这种现象就叫做缓存穿透。 分析： 关键在于在Redis查不...","link":"","photos":[],"count_time":{"symbolsCount":585,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},{"title":"Redis缓存雪崩","uid":"8c8ef61b68dd77d38b57f5cea2b182a9","slug":"02_Redis/缓存雪崩","date":"2019-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.010Z","comments":true,"path":"api/articles/02_Redis/缓存雪崩.json","keywords":null,"cover":[],"text":"当某一个时刻出现大规模的缓存失效的情况，那么就会导致大量的请求直接打在数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。这就是缓存雪崩。 分析： 造成缓存雪崩的关键在于在同一时间大规模...","link":"","photos":[],"count_time":{"symbolsCount":468,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}},{"title":"Redis高并发","uid":"b8997c28f0beb7e2efaf414b6b406c0f","slug":"02_Redis/防止高并发","date":"2021-03-20T07:05:07.000Z","updated":"2022-10-05T13:38:02.011Z","comments":true,"path":"api/articles/02_Redis/防止高并发.json","keywords":null,"cover":null,"text":" 背景 Redis是不会存在并发问题的，因为他是单进程的，再多的命令都是一个接一个地执行的。 场景 GET &amp; SET 利用Jedis等客户端对Redis进行并发访问 远程访问Redis的时候，因为网络等原因造成高并发访问、延迟返回 我们使用的时候，可能会出现并发问题，比...","link":"","photos":[],"count_time":{"symbolsCount":561,"symbolsTime":"1 mins."},"categories":[{"name":"Redis","slug":"Redis","count":10,"path":"api/categories/Redis.json"}],"tags":[{"name":"redis","slug":"redis","count":10,"path":"api/tags/redis.json"}],"author":{"name":"Michael","slug":"michael","avatar":"https://cdn.jsdelivr.net/gh/mikeah2011/oss@main/uPic/blog_logo.jpeg","link":"/","description":"知我所能者，我所能者，尽善尽美；<br/> <br/> 知我所不能者，我所不能者，虚怀若谷。","socials":{"github":"https://github.com/mikeah2011","twitter":"","stackoverflow":"https://stackoverflow.com/users/11422545/mikeah2011","wechat":"","qq":"","weibo":"https://weibo.com/u/2383628417","zhihu":"https://www.zhihu.com/people/michael-12-18","csdn":"https://blog.csdn.net/weixin_41273562","juejin":"https://juejin.cn/user/4389711549044269","customs":{}}}}]}